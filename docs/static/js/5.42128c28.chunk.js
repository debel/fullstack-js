(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{886:function(n,e){n.exports="# Forms with React\n\n---\n\n## Focusing an element\n\nFocusing on an element in HTML and JS is imperative\n\n-- `form.html` --\n```html\n  <input id=\"first-name\" />\n```\n-- `form.js` --\n```js\n  const inputNode = document.getElementById('first-name');\n  inputNode.focus();\n```\n\n---\n\n## React refs (using hooks)\n\nRefs are a way to access imperative APIs\n\n```jsx\n  function FocusedInput() {\n    const inputRef = React.useRef();\n    React.useEffect(() => { inputRef.current.focus(); }, []);\n\n    return <input ref={inputRef} />\n  }\n```\n\n---\n\n## React refs (using class)\n\n```jsx\n  class ClassyFocusedInput extends React.Component {\n    constructor() {\n      super();\n      this.inputRef = React.createRef();\n    }\n\n    componentDidMount() {\n      this.inputRef.current.focus();\n    }\n\n    render() {\n      return <input ref={this.inputRef} />\n    }\n  }\n```\n\n---\n\n## Uncontrolled forms\n\nUsing a ref to read the data from a field\n\n```jsx\n  function SimpleUncontrolledForm() {\n    const inputRef = React.useRef();\n    const submitForm = () => sendToServer(inputRef.current.value);\n\n    return (\n      <div>\n        <input ref={inputRef} />\n        <button onClick={submitForm}>submit</button>\n      </div>\n    );\n  }\n```\n\n---\n\n## Controlled forms\n\nusing React state to keep the value of a field\n\n```jsx\n  function SimpleControlledForm() {\n    const [value, setValue] = React.useState('');\n    const onChange = event => setValue(event.target.value);\n\n    return <input value={value} onChange={onChange} />;\n  }\n```\n\n---\n\n## Features comparison\n\n|  feature | uncontrolled || controlled |\n| --- | --- | ---|\n| one-time value retrieval |\t\u2705 ||\t\u2705 |\n| validating on submit | \u2705 || \u2705 |\n| instant field validation | \u274c|| \u2705 |\n| conditional disabling | \u274c || \u2705 |\n| several inputs for same data | \u274c || \u2705 |\n| | | | *[source](https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/)* |\n\n---\n\n## Hoisting state\n\n```jsx\n  function NameInput(props) {\n    const [name, setName] = useState(props.savedName);\n\n    const setAndPassToParent = (event) => {\n      const value = event.target.value;\n      setName(value);\n      props.onNameChange(value);\n    };\n\n    return (\n      <React.Fragment>\n        Enter your name:\n        <input value={firstName} onChange={setAndPassToParent} />\n      </React.Fragment>\n    );\n  }\n```\n\n---\n\n## useReducer\n\na more powerful version of useState\n\n```jsx\n  const initialState = { name: '', age: '' };\n  const reducer = (state, { field, value }) => {\n    return { ...state, [field]: value };\n  }\n\n  const MyForm = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    const setField = field => e =>\n      dispatch({ field, value: e.target.value });\n\n    return (<form>\n      <input value={state.name} onChange={setField('name')} />\n      <input value={state.age} onChange={setField('age')} />\n    </form>);\n  };\n\n```\n---\n\n## Questions?\n"}}]);
//# sourceMappingURL=5.42128c28.chunk.js.map